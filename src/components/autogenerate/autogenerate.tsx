import React, { useEffect, useState } from "react";

import OrderAttributes from "./twinAttributeOrder";

interface AutoGeneratedFieldsProps {
  url: string;
}

interface FieldProps {
  fieldName: string;
  value: any;
}

const AutoGeneratedFields: React.FC<AutoGeneratedFieldsProps> = ({ url }) => {
  const [jsonData, setJsonData] = useState<any | null>(null);
  const [expandedFields, setExpandedFields] = useState<string[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const data = await response.json();
        setJsonData(data);
      } catch (error) {
        console.error("Error fetching or parsing JSON:", error);
      }
    };

    fetchData();
  }, [url]);

  const toggleField = (fieldName: string) => {
    setExpandedFields((prev) =>
      prev.includes(fieldName)
        ? prev.filter((item) => item !== fieldName)
        : [...prev, fieldName]
    );
  };

  const isLink = (value: any) =>
    typeof value === "string" && value.startsWith("http");

  const renderField = ({ fieldName, value }: FieldProps) => {
    const isObject = typeof value === "object";
    const isExpanded = expandedFields.includes(fieldName);
    const linkStyle = {
      color: "blue",
      textDecoration: "underline",
    };

    return (
      <tr key={fieldName}>
        <td
          style={{ border: "1px solid #ddd", padding: "10px", margin: "10px" }}
        >
          <strong>{fieldName}</strong>
        </td>
        <td
          style={{ border: "1px solid #ddd", padding: "10px", margin: "10px" }}
        >
          {isObject && (
            <button onClick={() => toggleField(fieldName)}>
              {isExpanded ? "Hide Subfields" : "Show Subfields"}
            </button>
          )}
        </td>
        {isObject && isExpanded && (
          <td
            colSpan={2}
            style={{
              border: "1px solid #ddd",
              padding: "10px",
              margin: "10px",
            }}
          >
            <div style={{ marginLeft: "20px" }}>
              {Object.entries(value).map(([nestedKey, nestedValue]) =>
                renderField({ fieldName: nestedKey, value: nestedValue })
              )}
            </div>
          </td>
        )}
        {!isObject && (
          <td
            colSpan={2}
            style={{
              border: "1px solid #ddd",
              padding: "10px",
              margin: "10px",
            }}
          >
            {isLink(value) ? (
              <a
                href={value}
                target="_blank"
                rel="noopener noreferrer"
                style={linkStyle}
              >
                {value}
              </a>
            ) : (
              <span>{value}</span>
            )}
          </td>
        )}
      </tr>
    );
  };

  return (
    <div>
      {jsonData ? (
        <table style={{ borderCollapse: "collapse", width: "100%" }}>
          <tbody>
            {OrderAttributes(Object.entries(jsonData)).map(([key, value]) =>
              renderField({ fieldName: String(key), value })
            )}
          </tbody>
        </table>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
};

export default AutoGeneratedFields;
