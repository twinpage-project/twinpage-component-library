import { useEffect, useState } from 'react'
import { extractImageUrls } from '../../utils'
import OrderAttributes from '../../twinAttributeOrder'
import DtIdRedirectButton from '../DtIdRedirectButton'
import ImageVisualization from '../ImageVisualization'
import VideoVisualization from '../VideoVisualization'
import { isIFrameVideo } from '../VideoVisualization/VideoVisualization'
import { isNormalVideo } from '../VideoVisualization/VideoVisualization'

interface FieldProps {
  fieldName: string
  value: any
}

interface Props {
  twin: any
}

// This component takes a twin document and generates each data field on the website in an easily understandable format.
//                should not generate the same fields that are generated by the NamesInfo component.
//                is used in the dashboard component.

const AutogeneratedFields: React.FC<Props> = ({ twin }) => {
  const [jsonData, setJsonData] = useState<any | null>(null)
  const [expandedFields, setExpandedFields] = useState<Record<string, boolean>>(
    {}
  )

  // Below 5 test videos currently commented out, uncomment to test

  useEffect(() => {
    setJsonData(twin)
    extractImageUrls(twin).then((urls) =>
      localStorage.setItem('imageUrls', JSON.stringify(urls))
    )
  }, [twin])

  // exclude duplicate fields that are generated for each twin document
  const excludedFields = ['name', 'description', 'dt-id']

  // check if field is link, this will be used to show the field as a link
  const isLink = (value: any) =>
    typeof value === 'string' && value.startsWith('http')

  // render each data field from the twin document
  const renderField = (
    { fieldName, value }: FieldProps,
    isTopLevel: boolean = true,
    parentKey: string = ''
  ) => {
    // skip rendering excluded fields at top level
    if (isTopLevel && excludedFields.includes(fieldName)) {
      return null
    }

    // check if the value is a PNG image URL
    if (
      typeof value === 'string' &&
      (value.endsWith('.jpg') ||
        value.endsWith('.png') ||
        value.endsWith('.jpeg')) &&
      value.startsWith('http')
    ) {
      return (
        <div key={fieldName} className='mb-4'>
          {fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}
          <div className='ml-4 mt-2.5'>
            <ImageVisualization imageUrl={value} />
          </div>
        </div>
      )
    }

    // check if the value is a video
    if (
      typeof value === 'string' &&
      value.startsWith('http') &&
      (isIFrameVideo(value) || isNormalVideo(value))
    ) {
      return (
        <div key={fieldName} className='mb-4'>
          {fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}
          <div className='ml-4 mt-2.5'>
            <VideoVisualization videoUrl={value} />
          </div>
        </div>
      )
    }

    // Check if the field is "dt-id" and render DtIdRedirectButton
    if (fieldName === 'dt-id') {
      return (
        <div key={fieldName} className='mb-4'>
          <p>{fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} </p>
          <div className='ml-4 mt-2.5'>
            <DtIdRedirectButton dtId={value} />
          </div>
        </div>
      )
    }

    const uniqueKey = parentKey ? `${parentKey}-${fieldName}` : fieldName
    const isObject = typeof value === 'object'
    const isExpanded =
      expandedFields[uniqueKey as keyof typeof expandedFields] || false

    const toggleSubfields = () => {
      setExpandedFields((prev) => ({
        ...prev,
        [uniqueKey]: !prev[uniqueKey],
      }))
    }

    return (
      <div key={uniqueKey} className='mt-4'>
        <strong>
          {fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}
        </strong>
        <div className='ml-2.5'>
          {isObject && (
            <button onClick={toggleSubfields} className='button ml-2.5'>
              {isExpanded ? 'Hide Subfields' : 'Show Subfields'}
            </button>
          )}
          {isObject && isExpanded && (
            <div className='ml-5 mt-2.5'>
              {Object.entries(value).map(([nestedKey, nestedValue]) =>
                renderField(
                  { fieldName: nestedKey, value: nestedValue },
                  false,
                  uniqueKey
                )
              )}
            </div>
          )}

          {!isObject && (
            <div className='ml-2.5'>
              {isLink(value) ? (
                <a
                  href={value}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='hover:text-blue-500 hover:underline'
                >
                  {value}
                </a>
              ) : (
                <span>{value}</span>
              )}
            </div>
          )}
          <hr className='my-4 border-gray-200 sm:mx-auto dark:border-stone-800 lg:my-4' />
        </div>
      </div>
    )
  }

  return (
    <div>
      {jsonData ? (
        <div>
          {OrderAttributes(Object.entries(jsonData)).map(([key, value]) =>
            renderField({ fieldName: String(key), value })
          )}
        </div>
      ) : (
        <p className='animate-pulse'>Loading...</p>
      )}
    </div>
  )
}

export default AutogeneratedFields
